[user]
    name = Damien Ragoucy
    email = damien@praditus.com
[core]
    # autocrlf = input
    # safecrlf = true

[alias]
    co = checkout
    pr = pull --rebase --committer-date-is-author-date
    ci = commit
    st = status
    br = branch
    reb = rebase --committer-date-is-author-date
    hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
    type = cat-file -t
    dump = cat-file -p
    undo = reset --soft HEAD^
    # t for tree
    t = log --graph --decorate --pretty=oneline --abbrev-commit
    tt = log --graph --all --decorate --pretty=oneline --abbrev-commit
    lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
    lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n'          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
    d = diff
    unstage = reset HEAD --
    reb = rebase --committer-date-is-author-date
    fixup = !sh -c 'git commit -m \"fixup! $(git log -1 --format='\\''%s'\\'' $@)\"' -
    squash = !sh -c 'git commit -m \"squash! $(git log -1 --format='\\''%s'\\'' $@)\"' -
    ri = rebase --interactive --autosquash --committer-date-is-author-date

[push]
    default = tracking

[diff]
    color = true

[color]
  branch      = auto
  diff        = auto
  status      = auto
  interactive = auto
  ui          = auto
  pager       = true

[color "branch"]
  current = yellow reverse
  local   = yellow
  remote  = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old  = red bold
  new  = green bold

[color "status"]
  added     = yellow
  changed   = green
  untracked = cyan

[branch]
  ; When a new branch is created with git branch or git checkout that tracks
  ; another branch, this variable tells git to set up pull to rebase instead of
  ; merge (see "branch.<name>.rebase"). When never, rebase is never automatically
  ; set to true. When local, rebase is set to true for tracked branches of other
  ; local branches. When remote, rebase is set to true for tracked branches of
  ; remote-tracking branches. When always, rebase will be set to true for all
  ; tracking branches.
  ; autosetuprebase = always

[pull]
  rebase = true

[core]
  excludesfile = ~/.gitignore_global
